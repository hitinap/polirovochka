import os
import requests

from flask import Flask, render_template, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from config import Config

app = Flask(__name__)
app.config.from_object(Config)
db = SQLAlchemy(app)
migrate = Migrate(app, db)


class Service(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text, nullable=False)
    price = db.Column(db.Integer, nullable=False)


def create_tables():
    Service.query.delete()
    if not Service.query.first():
        services = [
            Service(title='–ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å–∫–æ–ª–æ–≤/—Ü–∞—Ä–∞–ø–∏–Ω', description='–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', price=1000),
            Service(title='–ß–µ—Ä–Ω–µ–Ω–∏–µ —Ä–µ–∑–∏–Ω—ã –∏ –ø–ª–∞—Å—Ç–∏–∫–∞', description='', price=500),
            Service(title='–û—á–∏—Å—Ç–∫–∞ –∫—É–∑–æ–≤–∞ –∞–≤—Ç–æ', description='', price=1000),
            Service(title='–•–∏–º–∏—á–µ—Å–∫–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä', description='', price=1500),
            Service(title='–•–∏–º—á–∏—Å—Ç–∫–∞ —Å–∞–ª–æ–Ω–∞ –∞–≤—Ç–æ', description='', price=4000),
            Service(title='–ù–∞–Ω–µ—Å–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π', description='', price=4000),
            Service(title='–£–¥–∞–ª–µ–Ω–∏–µ/–ø–æ–ª–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏—Ç–µ—Ä—Ç–æ—Å—Ç–µ–π', description='', price=1000),
            Service(title='–ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä', description='', price=1000),
            Service(title='–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ', description='', price=6000),
        ]
        db.session.bulk_save_objects(services)
        db.session.commit()


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/services')
def services():
    all_services = Service.query.all()
    return render_template('services.html', services=all_services)


@app.route('/promo')
def promo():
    return render_template('promo.html')


@app.route('/gallery')
def gallery():
    return render_template('gallery.html')


@app.route('/contacts')
def contacts():
    return render_template('contacts.html')


@app.route('/submit-form', methods=['POST'])
def submit_form():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        data = request.json
        name = data.get('name')
        phone = data.get('phone')
        service = data.get('service')
        comment = data.get('comment', '')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not name or not phone or not service:
            return jsonify({
                'status': 'error',
                'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
            }), 400

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if telegram_bot_token and telegram_chat_id:
            message = (
                "üì¨ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!*\n\n"
                f"*–ò–º—è:* {name}\n"
                f"*–¢–µ–ª–µ—Ñ–æ–Ω:* `{phone}`\n"
                f"*–£—Å–ª—É–≥–∞:* {service}\n"
                f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment if comment else '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"
            )
            
            url = f"https://api.telegram.org/bot{telegram_bot_token}/sendMessage"
            payload = {
                'chat_id': telegram_chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, json=payload)
            if response.status_code != 200:
                app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
        
        return jsonify({
            'status': 'success',
            'message': '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        })
    
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }), 500


if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        create_tables()

    app.run(debug=True)
